{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to dvc-studio-client","text":"<ul> <li>API Reference</li> </ul>"},{"location":"reference/dvc_studio_client/","title":"Dvc studio client","text":"<p>DVC Studio Client.</p>"},{"location":"reference/dvc_studio_client/auth/","title":"Auth","text":""},{"location":"reference/dvc_studio_client/auth/#dvc_studio_client.auth.check_token_authentication","title":"<code>check_token_authentication(*, uri, device_code)</code>","text":"<p>Checks the authentication status of a token based on a device code and returns access token upon successful authentication.</p>"},{"location":"reference/dvc_studio_client/auth/#dvc_studio_client.auth.check_token_authentication--parameters","title":"Parameters","text":"<ul> <li>uri (str): The token uri to send the request to.</li> <li>device_code (str): The device code to check authentication for.</li> </ul>"},{"location":"reference/dvc_studio_client/auth/#dvc_studio_client.auth.check_token_authentication--returns","title":"Returns","text":"<ul> <li>str | None: The access token if authorized, otherwise None.</li> </ul>"},{"location":"reference/dvc_studio_client/auth/#dvc_studio_client.auth.check_token_authentication--raises","title":"Raises","text":"<ul> <li>requests.HTTPError: If the status code of the response is not 200.</li> </ul> <p>Example Usage:</p> <pre><code>token = check_token_authentication(\n    uri=\"https://example.com/api/\", device_code=\"1234567890\"\n)\nif token is not None:\n    print(\"Access token:\", token)\nelse:\n    print(\"Authentication expired.\")\n</code></pre> Source code in <code>dvc_studio_client/auth.py</code> <pre><code>def check_token_authentication(*, uri: str, device_code: str) -&gt; Optional[str]:\n    \"\"\"\n    Checks the authentication status of a token based on a device code and\n    returns access token upon successful authentication.\n\n    Parameters\n    ----------\n    - uri (str): The token uri to send the request to.\n    - device_code (str): The device code to check authentication for.\n\n    Returns\n    -------\n    - str | None: The access token if authorized, otherwise None.\n\n    Raises\n    ------\n    - requests.HTTPError: If the status code of the response is not 200.\n\n    Example Usage:\n    ```\n    token = check_token_authentication(\n        uri=\"https://example.com/api/\", device_code=\"1234567890\"\n    )\n    if token is not None:\n        print(\"Access token:\", token)\n    else:\n        print(\"Authentication expired.\")\n    ```\n    \"\"\"\n    import time\n\n    logger.debug(\"Polling to find if the user code is authorized\")\n\n    data = {\"code\": device_code}\n    session = requests.Session()\n    session.mount(uri, HTTPAdapter(max_retries=3))\n\n    logger.debug(\"Checking with %s to %s\", device_code, uri)\n\n    counter = 1\n    while True:\n        logger.debug(\"Polling attempt #%s\", counter)\n        r = session.post(uri, json=data, timeout=5, allow_redirects=False)\n        counter += 1\n        if r.status_code == 400:\n            d = r.json()\n            detail = d.get(\"detail\")\n            if detail == \"authorization_pending\":\n                # Wait 5 seconds before retrying.\n                time.sleep(5)\n                continue\n            if detail == \"authorization_expired\":\n                raise AuthorizationExpiredError(  # noqa: TRY003\n                    \"failed to authenticate: This 'device_code' has expired.\",\n                )\n\n        r.raise_for_status()\n\n        return r.json()[\"access_token\"]\n</code></pre>"},{"location":"reference/dvc_studio_client/auth/#dvc_studio_client.auth.get_access_token","title":"<code>get_access_token(*, hostname, token_name=None, scopes='', client_name='client', open_browser=True, post_login_message=None, use_device_code=False)</code>","text":"<p>Initiate Authentication</p> <p>This method initiates the authentication process for a client application. It generates a user code and a verification URI that the user needs to access in order to authorize the application.</p>"},{"location":"reference/dvc_studio_client/auth/#dvc_studio_client.auth.get_access_token--parameters","title":"Parameters","text":"<pre><code>token_name (str): The name of the client application.\nhostname (str): The base URL of the application.\nscopes (str, optional): A comma-separated string of scopes that\n    the application requires. Default is empty.\nopen_browser (bool): Whether or not to open the browser to authenticate\nclient_name (str, optional): Client name\n</code></pre>"},{"location":"reference/dvc_studio_client/auth/#dvc_studio_client.auth.get_access_token--returns","title":"Returns","text":"<pre><code>tuple: A tuple containing the token name and the access token.\nThe token name is a string representing the token's name,\nwhile the access token is a string representing the authorized access token.\n</code></pre> Source code in <code>dvc_studio_client/auth.py</code> <pre><code>def get_access_token(  # noqa: PLR0913\n    *,\n    hostname: str,\n    token_name: Optional[str] = None,\n    scopes: str = \"\",\n    client_name: str = \"client\",\n    open_browser: bool = True,\n    post_login_message: Optional[str] = None,\n    use_device_code: bool = False,\n):\n    \"\"\"Initiate Authentication\n\n    This method initiates the authentication process for a client application.\n    It generates a user code and a verification URI that the user needs to\n    access in order to authorize the application.\n\n    Parameters\n    ----------\n        token_name (str): The name of the client application.\n        hostname (str): The base URL of the application.\n        scopes (str, optional): A comma-separated string of scopes that\n            the application requires. Default is empty.\n        open_browser (bool): Whether or not to open the browser to authenticate\n        client_name (str, optional): Client name\n\n    Returns\n    -------\n        tuple: A tuple containing the token name and the access token.\n        The token name is a string representing the token's name,\n        while the access token is a string representing the authorized access token.\n    \"\"\"\n    import webbrowser\n\n    post_login_message = post_login_message or (\n        \"Once you've logged in, return here \"\n        \"and you'll be ready to start the experiments.\"\n    )\n\n    response = start_device_login(\n        client_name=client_name,\n        base_url=hostname,\n        token_name=token_name,\n        scopes=scopes.split(\",\") if scopes else [],\n    )\n    verification_uri = response[\"verification_uri\"]\n    user_code = response[\"user_code\"]\n    device_code = response[\"device_code\"]\n    token_uri = response[\"token_uri\"]\n    token_name = response[\"token_name\"]\n    url = f\"{verification_uri}?code={user_code}\"\n\n    if use_device_code:\n        open_browser = False  # backward compatibility\n\n    if open_browser:\n        print(\"Opening link for login at\", url)  # noqa: T201\n        print(f\"\\n{post_login_message}\")  # noqa: T201\n        opened = webbrowser.open(url)\n        if not opened:\n            print(  # noqa: T201\n                \"\\nFailed to open a web browser. \"\n                \"Open the above url to continue in your web browser.\",\n                file=sys.stderr,\n            )\n    else:\n        print(\"Open this url to continue in your web browser:\", url)  # noqa: T201\n        print(f\"\\n{post_login_message}\")  # noqa: T201\n\n    access_token = check_token_authentication(uri=token_uri, device_code=device_code)\n    return token_name, access_token\n</code></pre>"},{"location":"reference/dvc_studio_client/auth/#dvc_studio_client.auth.start_device_login","title":"<code>start_device_login(*, client_name, base_url=None, token_name=None, scopes=None)</code>","text":"<p>This method starts the device login process for Studio.</p>"},{"location":"reference/dvc_studio_client/auth/#dvc_studio_client.auth.start_device_login--parameters","title":"Parameters","text":"<ul> <li>client_name (required): The name of the client application.</li> </ul> <p>Optional Parameters: - base_url: The base URL of the Studio API.     If not provided, the default value is \"https://studio.iterative.ai\". - token_name: The name of the token. If not provided, it defaults to None. - scopes: A list of scopes to request. If not provided, it defaults to None.</p>"},{"location":"reference/dvc_studio_client/auth/#dvc_studio_client.auth.start_device_login--returns","title":"Returns","text":"<ul> <li>DeviceLoginResponse: A response object containing the device login information.</li> </ul>"},{"location":"reference/dvc_studio_client/auth/#dvc_studio_client.auth.start_device_login--raises","title":"Raises","text":"<ul> <li>ValueError: If any of the provided scopes are not valid.</li> <li>RequestException: If the request fails with any 400 response or any other reason.</li> </ul> Source code in <code>dvc_studio_client/auth.py</code> <pre><code>def start_device_login(\n    *,\n    client_name: str,\n    base_url: Optional[str] = None,\n    token_name: Optional[str] = None,\n    scopes: Optional[list[str]] = None,\n) -&gt; DeviceLoginResponse:\n    \"\"\"This method starts the device login process for Studio.\n\n    Parameters\n    ----------\n    - client_name (required): The name of the client application.\n\n    Optional Parameters:\n    - base_url: The base URL of the Studio API.\n        If not provided, the default value is \"https://studio.iterative.ai\".\n    - token_name: The name of the token. If not provided, it defaults to None.\n    - scopes: A list of scopes to request. If not provided, it defaults to None.\n\n    Returns\n    -------\n    - DeviceLoginResponse: A response object containing the device login information.\n\n    Raises\n    ------\n    - ValueError: If any of the provided scopes are not valid.\n    - RequestException: If the request fails with any 400 response or any other reason.\n\n    \"\"\"\n    logger.debug(\n        \"Starting device login for Studio%s\",\n        f\" ({base_url})\" if base_url else \"\",\n    )\n    if invalid_scopes := list(\n        filter(lambda s: s.upper() not in AVAILABLE_SCOPES, scopes),  # type: ignore[arg-type,attr-defined]\n    ):\n        raise InvalidScopesError(  # noqa: TRY003\n            f\"Following scopes are not valid: {', '.join(invalid_scopes)}\",  # type: ignore[arg-type]\n        )\n\n    body = {\"client_name\": client_name}\n\n    if token_name:\n        body[\"token_name\"] = token_name\n\n    if scopes:\n        body[\"scopes\"] = scopes  # type: ignore[assignment]\n\n    logger.debug(f\"JSON body `{body=}`\")\n\n    response = requests.post(\n        url=urljoin(base_url or \"https://studio.iterative.ai\", \"api/device-login\"),\n        json=body,\n        headers={\n            \"Content-type\": \"application/json\",\n        },\n        timeout=5,\n    )\n\n    response.raise_for_status()\n    d = response.json()\n\n    logger.debug(\"received response: %s (status=%r)\", d, response.status_code)\n    return d\n</code></pre>"},{"location":"reference/dvc_studio_client/config/","title":"Config","text":""},{"location":"reference/dvc_studio_client/config/#dvc_studio_client.config.get_studio_config","title":"<code>get_studio_config(dvc_studio_config=None, offline=False, studio_token=None, studio_repo_url=None, studio_url=None)</code>","text":"<p>Get studio config options.</p> <pre><code>dvc_studio_config (Optional[dict]): Dict returned by dvc.Repo.config[\"studio\"].\noffline (bool): Whether offline mode is enabled. Default: false.\nstudio_token (Optional[str]): Studio access token obtained from the UI.\nstudio_repo_url (Optional[str]): URL of the Git repository that has been\n    imported into Studio UI.\nstudio_url (Optional[str]): Base URL of Studio UI (if self-hosted).\n</code></pre> <pre><code>Dict:\n    Config options for posting live metrics.\n    Keys match the DVC studio config section.\n</code></pre>"},{"location":"reference/dvc_studio_client/config/#dvc_studio_client.config.get_studio_config--example","title":"Example:","text":"<pre><code>        {\n            \"token\": \"mytoken\",\n            \"repo_url\": \"git@github.com:iterative/dvc-studio-client.git\",\n            \"url\": \"https://studio.iterative.ai\",\n        }\n</code></pre> Source code in <code>dvc_studio_client/config.py</code> <pre><code>def get_studio_config(\n    dvc_studio_config: Optional[dict[str, Any]] = None,\n    offline: bool = False,\n    studio_token: Optional[str] = None,\n    studio_repo_url: Optional[str] = None,\n    studio_url: Optional[str] = None,\n) -&gt; dict[str, Any]:\n    \"\"\"Get studio config options.\n\n    Args:\n    ----\n        dvc_studio_config (Optional[dict]): Dict returned by dvc.Repo.config[\"studio\"].\n        offline (bool): Whether offline mode is enabled. Default: false.\n        studio_token (Optional[str]): Studio access token obtained from the UI.\n        studio_repo_url (Optional[str]): URL of the Git repository that has been\n            imported into Studio UI.\n        studio_url (Optional[str]): Base URL of Studio UI (if self-hosted).\n\n    Returns:\n    -------\n        Dict:\n            Config options for posting live metrics.\n            Keys match the DVC studio config section.\n\n    Example:\n    -------\n                {\n                    \"token\": \"mytoken\",\n                    \"repo_url\": \"git@github.com:iterative/dvc-studio-client.git\",\n                    \"url\": \"https://studio.iterative.ai\",\n                }\n    \"\"\"\n    config = {}\n    if not dvc_studio_config:\n        dvc_studio_config = {}\n\n    def to_bool(var):\n        if var is None:\n            return False\n        return bool(re.search(\"1|y|yes|true\", str(var), flags=re.I))\n\n    offline = (\n        offline\n        or to_bool(getenv(DVC_STUDIO_OFFLINE))\n        or to_bool(dvc_studio_config.get(\"offline\"))\n    )\n    if offline:\n        logger.debug(\"Offline mode enabled. Skipping `post_studio_live_metrics`\")\n        return {}\n\n    studio_token = (\n        studio_token\n        or getenv(DVC_STUDIO_TOKEN)\n        or getenv(STUDIO_TOKEN)\n        or dvc_studio_config.get(\"token\")\n    )\n    if not studio_token:\n        logger.debug(\n            f\"{DVC_STUDIO_TOKEN} not found. Skipping `post_studio_live_metrics`\",\n        )\n        return {}\n    config[\"token\"] = studio_token\n\n    studio_repo_url = (\n        studio_repo_url\n        or getenv(DVC_STUDIO_REPO_URL)\n        or getenv(STUDIO_REPO_URL)\n        or dvc_studio_config.get(\"repo_url\")\n    )\n    if studio_repo_url is None:\n        logger.debug(\n            f\"{DVC_STUDIO_REPO_URL} not found. Trying to automatically find it.\",\n        )\n        studio_repo_url = get_studio_repo_url()\n    if studio_repo_url:\n        config[\"repo_url\"] = studio_repo_url\n    else:\n        logger.debug(\n            f\"{DVC_STUDIO_REPO_URL} not found. Skipping `post_studio_live_metrics`\",\n        )\n        return {}\n\n    studio_url = studio_url or getenv(DVC_STUDIO_URL) or dvc_studio_config.get(\"url\")\n    if studio_url:\n        config[\"url\"] = studio_url\n    else:\n        logger.debug(f\"{DVC_STUDIO_URL} not found. Using {DEFAULT_STUDIO_URL}.\")\n        config[\"url\"] = DEFAULT_STUDIO_URL\n\n    return config\n</code></pre>"},{"location":"reference/dvc_studio_client/env/","title":"Env","text":""},{"location":"reference/dvc_studio_client/model_registry/","title":"Model registry","text":""},{"location":"reference/dvc_studio_client/model_registry/#dvc_studio_client.model_registry.get_download_uris","title":"<code>get_download_uris(repo, name, version=None, stage=None, **kwargs)</code>","text":"<p>Return download URIs for the specified model.</p> <pre><code>repo: Git repo URL.\nname: Model name.\nversion: Model version.\nstage: Model stage.\n</code></pre> <p>Additional keyword arguments will be passed to get_studio_config().</p> <pre><code>ValueError: Invalid arguments were passed or the API call failed.\n</code></pre> Source code in <code>dvc_studio_client/model_registry.py</code> <pre><code>def get_download_uris(\n    repo: str,\n    name: str,\n    version: Optional[str] = None,\n    stage: Optional[str] = None,\n    **kwargs,\n) -&gt; dict[str, str]:\n    \"\"\"Return download URIs for the specified model.\n\n    Args:\n    ----\n        repo: Git repo URL.\n        name: Model name.\n        version: Model version.\n        stage: Model stage.\n\n    Additional keyword arguments will be passed to get_studio_config().\n\n    Raises:\n    ------\n        ValueError: Invalid arguments were passed or the API call failed.\n    \"\"\"\n    config = get_studio_config(**kwargs)\n    if not config:\n        raise ValueError(\"No studio config\")  # noqa: TRY003\n    params = {\"repo\": repo, \"name\": name}\n    if version and stage:\n        raise ValueError(\"Version and stage are mutually exclusive\")  # noqa: TRY003\n    if version:\n        params[\"version\"] = version\n    if stage:\n        params[\"stage\"] = stage\n\n    try:\n        url = urljoin(config[\"url\"], GET_DOWNLOAD_URIS_PATH)\n        response = requests.get(\n            url,\n            params=params,\n            headers={\"Authorization\": f\"token {config['token']}\"},\n            timeout=(30, 5),\n        )\n    except RequestException as e:\n        raise ValueError(\"Failed to reach studio API\") from e  # noqa: TRY003\n\n    if response.status_code != 200:\n        message = response.content.decode()\n        logger.debug(\n            \"get_download_uris: %d '%s'\",\n            response.status_code,\n            message,\n        )\n        raise ValueError(f\"Failed to get model download URIs from studio: {message}\")  # noqa: TRY003\n    return response.json()\n</code></pre>"},{"location":"reference/dvc_studio_client/post_live_metrics/","title":"Post live metrics","text":""},{"location":"reference/dvc_studio_client/post_live_metrics/#dvc_studio_client.post_live_metrics.post_live_metrics","title":"<code>post_live_metrics(event_type, baseline_sha, name, client, experiment_rev=None, machine=None, message=None, metrics=None, params=None, plots=None, step=None, dvc_studio_config=None, offline=False, studio_token=None, studio_repo_url=None, studio_url=None, subdir=None)</code>","text":"<p>Post <code>event_type</code> to Studio's <code>api/live</code>.</p> <p>Requires the environment variable <code>DVC_STUDIO_TOKEN</code> to be set. If the environment variable <code>DVC_STUDIO_REPO_URL</code> is not set, will attempt to infer it from <code>git ls-remote --get-url</code>.</p> <pre><code>event_type (Literal[\"start\", \"data\", \"done\"]): Type of the event.\nbaseline_sha (str): SHA of the commit from which the experiment starts.\nname (str): Name of the experiment.\n    Automatically generated by DVC(Live) or manually passed by the user.\n    (baseline_sha, name) is a unique identifier of the experiment.\nclient (Literal[\"dvc\", \"dvclive\"]): Name of the client.\nexperiment_rev (Optional[str]): SHA of the revision created for\n    the experiment.\n    Only used when `event_type=\"done\"`.\n    Only used when\nmachine (Optional[Dict[str, Any]]): Information about the machine\n    running the experiment.\n    Defaults to `None`.\n    ```\n    machine={\n        \"cpu\": 0.94\n        \"memory\": 0.99\n        \"cloud\": \"aws\"\n        \"instance\": \"t2.micro\"\n    }\n    ```\nmessage: (Optional[str]): Custom message to be displayed as the commit\n    message in Studio UI.\nmetrics (Optional[Dict[str, Any]]): Updates to DVC metric files.\n    Defaults to `None`.\n    Only used when `event_type=\"data\"`.\n    ```\n    metrics={\n        \"dvclive/metrics.json\": {\n            \"data\": {\n                \"foo\": 1.0\n            }\n        }\n    }\n    ```\nparams (Optional[Dict[str, Any]]): Updates to DVC param files.\n    Defaults to `None`.\n    ```\n    params={\n        \"dvclive/params.yaml\": {\n            \"foo\": \"bar\"\n        }\n    }\n    ```\nplots (Optional[Dict[str, Any]]): Updates to DVC plots files.\n    Defaults to `None`.\n    Only used when `event_type=\"data\"`.\n    ```\n    plots={\n        \"dvclive/plots/metrics/foo.tsv\": {\n            \"data\": [{\"step\": 0, \"foo\": 1.0}]\n        },\n        \"dvclive/plots/images/bar.png\": {\n            \"image\": \"base64-string\"\n        }\n    }\n    ```\nstep (Optional[int]): Current step of the training loop.\n    Usually comes from DVCLive `Live.step` property.\n    Required in when `event_type=\"data\"`.\n    Defaults to `None`.\ndvc_studio_config (Optional[Dict]): DVC config options for Studio.\noffline (bool): Whether offline mode is enabled.\nstudio_token (Optional[str]): Studio access token obtained from the UI.\nstudio_repo_url (Optional[str]): URL of the Git repository that has been\n    imported into Studio UI.\nstudio_url (Optional[str]): Base URL of Studio UI (if self-hosted).\n</code></pre> <pre><code>Optional[bool]:\n    `True` - if received status code 200 from Studio.\n    `False` - if received other status code or RequestException raised.\n    `None`- if prerequisites weren't met and the request was not sent.\n</code></pre> Source code in <code>dvc_studio_client/post_live_metrics.py</code> <pre><code>def post_live_metrics(  # noqa: C901,PLR0912,PLR0913\n    event_type: Literal[\"start\", \"data\", \"done\"],\n    baseline_sha: str,\n    name: str,\n    client: Literal[\"dvc\", \"dvclive\"],\n    experiment_rev: Optional[str] = None,\n    machine: Optional[dict[str, Any]] = None,\n    message: Optional[str] = None,\n    metrics: Optional[dict[str, Any]] = None,\n    params: Optional[dict[str, Any]] = None,\n    plots: Optional[dict[str, Any]] = None,\n    step: Optional[int] = None,\n    dvc_studio_config: Optional[dict[str, Any]] = None,\n    offline: bool = False,\n    studio_token: Optional[str] = None,\n    studio_repo_url: Optional[str] = None,\n    studio_url: Optional[str] = None,\n    subdir: Optional[str] = None,\n) -&gt; Optional[bool]:\n    \"\"\"Post `event_type` to Studio's `api/live`.\n\n    Requires the environment variable `DVC_STUDIO_TOKEN` to be set.\n    If the environment variable `DVC_STUDIO_REPO_URL` is not set, will attempt to\n    infer it from `git ls-remote --get-url`.\n\n    Args:\n    ----\n        event_type (Literal[\"start\", \"data\", \"done\"]): Type of the event.\n        baseline_sha (str): SHA of the commit from which the experiment starts.\n        name (str): Name of the experiment.\n            Automatically generated by DVC(Live) or manually passed by the user.\n            (baseline_sha, name) is a unique identifier of the experiment.\n        client (Literal[\"dvc\", \"dvclive\"]): Name of the client.\n        experiment_rev (Optional[str]): SHA of the revision created for\n            the experiment.\n            Only used when `event_type=\"done\"`.\n            Only used when\n        machine (Optional[Dict[str, Any]]): Information about the machine\n            running the experiment.\n            Defaults to `None`.\n            ```\n            machine={\n                \"cpu\": 0.94\n                \"memory\": 0.99\n                \"cloud\": \"aws\"\n                \"instance\": \"t2.micro\"\n            }\n            ```\n        message: (Optional[str]): Custom message to be displayed as the commit\n            message in Studio UI.\n        metrics (Optional[Dict[str, Any]]): Updates to DVC metric files.\n            Defaults to `None`.\n            Only used when `event_type=\"data\"`.\n            ```\n            metrics={\n                \"dvclive/metrics.json\": {\n                    \"data\": {\n                        \"foo\": 1.0\n                    }\n                }\n            }\n            ```\n        params (Optional[Dict[str, Any]]): Updates to DVC param files.\n            Defaults to `None`.\n            ```\n            params={\n                \"dvclive/params.yaml\": {\n                    \"foo\": \"bar\"\n                }\n            }\n            ```\n        plots (Optional[Dict[str, Any]]): Updates to DVC plots files.\n            Defaults to `None`.\n            Only used when `event_type=\"data\"`.\n            ```\n            plots={\n                \"dvclive/plots/metrics/foo.tsv\": {\n                    \"data\": [{\"step\": 0, \"foo\": 1.0}]\n                },\n                \"dvclive/plots/images/bar.png\": {\n                    \"image\": \"base64-string\"\n                }\n            }\n            ```\n        step (Optional[int]): Current step of the training loop.\n            Usually comes from DVCLive `Live.step` property.\n            Required in when `event_type=\"data\"`.\n            Defaults to `None`.\n        dvc_studio_config (Optional[Dict]): DVC config options for Studio.\n        offline (bool): Whether offline mode is enabled.\n        studio_token (Optional[str]): Studio access token obtained from the UI.\n        studio_repo_url (Optional[str]): URL of the Git repository that has been\n            imported into Studio UI.\n        studio_url (Optional[str]): Base URL of Studio UI (if self-hosted).\n\n    Returns:\n    -------\n        Optional[bool]:\n            `True` - if received status code 200 from Studio.\n            `False` - if received other status code or RequestException raised.\n            `None`- if prerequisites weren't met and the request was not sent.\n    \"\"\"\n    config = get_studio_config(\n        dvc_studio_config=dvc_studio_config,\n        offline=offline,\n        studio_token=studio_token,\n        studio_repo_url=studio_repo_url,\n        studio_url=studio_url,\n    )\n\n    if not config:\n        return None\n\n    body = {\n        \"type\": event_type,\n        \"repo_url\": config[\"repo_url\"],\n        \"baseline_sha\": baseline_sha,\n        \"name\": name,\n        \"client\": client,\n    }\n\n    if params:\n        body[\"params\"] = params\n\n    if metrics:\n        body[\"metrics\"] = metrics\n\n    if machine:\n        body[\"machine\"] = machine\n\n    if event_type == \"start\":\n        if message:\n            # Cutting the message to match the commit title length limit.\n            body[\"message\"] = message[:72]\n        if subdir:\n            body[\"subdir\"] = subdir\n    elif event_type == \"data\":\n        if step is None:\n            logger.warning(\"Missing `step` in `data` event.\")\n            return None\n        body[\"step\"] = step\n        if plots:\n            body[\"plots\"] = plots\n    elif event_type == \"done\":\n        if experiment_rev:\n            body[\"experiment_rev\"] = experiment_rev\n\n    else:\n        logger.warning(f\"Invalid `event_type`: {event_type}\")  # type: ignore[unreachable]\n        return None\n\n    try:\n        SCHEMAS_BY_TYPE[event_type](body)\n    except (Invalid, MultipleInvalid) as e:\n        logger.warning(humanize_error(body, e))\n        return None\n\n    logger.debug(f\"post_studio_live_metrics `{event_type=}`\")\n\n    path = getenv(STUDIO_ENDPOINT) or \"api/live\"\n    url = urljoin(config[\"url\"], path)\n    token = config[\"token\"]\n\n    if body[\"type\"] != \"data\" or \"plots\" not in body:\n        return _single_post(url, body, token)\n\n    return _post_in_chunks(url, body, token)\n</code></pre>"},{"location":"reference/dvc_studio_client/schema/","title":"Schema","text":""},{"location":"reference/dvc_studio_client/schema/#dvc_studio_client.schema.choices","title":"<code>choices(*choices)</code>","text":"<p>Checks that value belongs to the specified set of values</p> Source code in <code>dvc_studio_client/schema.py</code> <pre><code>def choices(*choices):\n    \"\"\"Checks that value belongs to the specified set of values\"\"\"\n    return Any(*choices, msg=f\"expected one of {', '.join(choices)}\")\n</code></pre>"}]}